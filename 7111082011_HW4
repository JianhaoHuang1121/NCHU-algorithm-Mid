import time
import matplotlib.pyplot as plt

# Pure recursive method
def fibonacci_recursive(n):
    if n <= 1:
        return n
    return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)

# Dynamic programming method
def fibonacci_dynamic(n):
    fib = [0] * (n+1)
    fib[1] = 1
    for i in range(2, n+1):
        fib[i] = fib[i-1] + fib[i-2]
    return fib[n]

# Measure execution time for each method and plot the results
def measure_execution_time():
    n_values = list(range(10, 101, 10))
    recursive_times = []
    dynamic_times = []

    for n in n_values:
        start_time = time.time()
        fibonacci_recursive(n)
        recursive_times.append(time.time() - start_time)

        start_time = time.time()
        fibonacci_dynamic(n)
        dynamic_times.append(time.time() - start_time)

    plt.plot(n_values, recursive_times, label='Recursive')
    plt.plot(n_values, dynamic_times, label='Dynamic Programming')
    plt.xlabel('n')
    plt.ylabel('Execution Time (seconds)')
    plt.title('Execution Time of Fibonacci Numbers')
    plt.legend()
    plt.show()

measure_execution_time()
